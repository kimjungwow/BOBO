{"version":3,"sources":["components/Menu.js","components/StudentList.js","components/ClassRecord.js","components/NoticeBoard.js","components/Settings.js","components/App.js","serviceWorker.js","index.js"],"names":["Menu","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","react_router_dom","to","Component","StudentList","ClassRecord","NoticeBoard","Settings","App","react_router","exact","path","component","components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42040344.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport \"../css/Menu.css\";\n\nexport class Menu extends Component {\n  render() {\n    return (\n      <div className=\"menu\">\n        <div className=\"menu-item\"><Link to=\"/BOBO\">Student List</Link></div>\n        <div className=\"menu-item\"><Link to=\"/BOBO/classRecord\">Class Record</Link></div>\n        <div className=\"menu-item\"><Link to=\"/BOBO/notice\">Notice</Link></div>\n        <div className=\"menu-item\"><Link to=\"/BOBO/settings\">Settings</Link></div>\n      </div>\n    )\n  }\n}\n\nexport default Menu\n","import React, { Component } from 'react'\n\nexport class StudentList extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        StudentList\n      </div>\n    )\n  }\n}\n\nexport default StudentList\n","import React, { Component } from 'react'\n\nexport class ClassRecord extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        Add Class Record\n      </div>\n    )\n  }\n}\n\nexport default ClassRecord\n","import React, { Component } from 'react'\n\nexport class NoticeBoard extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        Notice Board\n      </div>\n    )\n  }\n}\n\nexport default NoticeBoard\n","import React, { Component } from 'react'\n\nexport class Settings extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        Settings\n      </div>\n    )\n  }\n}\n\nexport default Settings\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport '../css/App.css'\n\nimport Menu from './Menu';\nimport StudentList from \"./StudentList\";\nimport ClassRecord from \"./ClassRecord\";\nimport NoticeBoard from \"./NoticeBoard\";\nimport Settings from \"./Settings\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Route exact path=\"/BOBO\" component={StudentList}/>\n        <Route exact path=\"/BOBO/classRecord\" component={ClassRecord}/>\n        <Route exact path=\"/BOBO/notice\" component={NoticeBoard}/>\n        <Route exact path=\"/BOBO/settings\" component={Settings}/>\n        <Menu/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}